---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luxizhu.
--- DateTime: 2021/5/27 15:26
---


local ngx = ngx
local tonumber = tonumber
local tostring = tostring
local require = require
local type = type

---@type cjson
local cjson = require "cjson"
local kuab_req = require "kuab.khtp.req"
local config = require "conf.config"
local _M = {
    cookie = ""
}
local login_err

function _M.exit(code, body)
    if code then
        ngx.status = code
    end
    if body then
        ngx.print(body)
    end
    ngx.exit(code)
end

function _M.http_pass(res)
    local content_type = res.headers["Content-Type"]
    if content_type then
        ngx.header["Content-Type"] = content_type
    end
    ngx.status = res.status
    if res.body then
        ngx.print(res.body)
    end
    ngx.exit(res.status)
end

function _M.login()
    local req = kuab_req.new("session_logon", config.appID, config.appSecret)
    local res, err = req:sign():post(config.kuab_url)
    if err then
        ngx.log(ngx.ERR, err)
        return 1
    end
    local doc = cjson.decode(res.body)
    local err_code = tonumber(doc.Code)
    local err_msg = tostring(doc.Msg)
    if err_code ~= 0 then
        ngx.log(ngx.ERR, res.body)
        login_err = err_msg
        return 2
    end
    if type(doc.Data) ~= "table" then
        login_err = "解析结果集失败!"
        ngx.log(ngx.ERR, login_err)
        return 3
    end
    if #doc.Data > 0 then
        _M.cookie = doc.Data[1].Cookie
    end
    ngx.log(ngx.INFO, res.body)
    login_err = nil
    return 0
end

function _M.exec(params)
    if _M.cookie == "" then
        if _M.login() ~= 0 then
            _M.exit(ngx.HTTP_INTERNAL_SERVER_ERROR, login_err)
        end
    end
    local req = kuab_req
            .new(params.__MsgType, config.appID)
            :set_params(params)
            :set_cookie(_M.cookie)
            :sign()
            :set_params {
        __FLG_WantTran = config.tranMode,
        __FLG_Encrypt = config.encryptFlag,
    }

    local res, err = req:post(config.kuab_url)
    if err then
        _M.exit(ngx.HTTP_INTERNAL_SERVER_ERROR, err)
    end
    _M.http_pass(res)
end

local function login_fun(premature)
    if premature then
        return
    end
    _M.login()
end

function _M.init_worker()
    ngx.timer.at(0, login_fun)
end

function _M.content()
    ngx.req.read_body()
    local body = ngx.req.get_body_data()
    local params = cjson.decode(body)
    if not params.__MsgType then
        _M.exit(ngx.HTTP_BAD_REQUEST)
    end
    _M.exec(params)
end

return _M