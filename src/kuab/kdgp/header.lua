---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luxizhu.
--- DateTime: 2021/5/28 16:19
---

local tostring = tostring
local require = require
local cjson = require("cjson")
local setmetatable = setmetatable
local util = require "kuab.util.util"

--- 包头
---@class kdgp_header
---@field Protocol string      @ 业务协议名称，FS接口固定填STD
---@field Version string       @ KDGP版本
---@field MsgType  string      @ 功能号
---@field SendingTime string   @ 客户端发送时间 "2009-2-27 18:02:15.123"
---@field Context  string      @ 客户端会话序号，上下文关联使用，网关反射不处理
---@field ReplyCode string     @ 处理结果代码
---@field ReplyMsg string      @ 处理结果信息
---@field ReplyLevel string    @ 处理结果类型
---@field AppID  string        @ 签入时设置的开发者ID号
---@field AppSecret string     @ 签入时设置的应用授权号
---@field AppIP string         @ 请求时设置的IP地址
---@field AppMAC  string       @ 请求时设置的MAC地址
---@field AppName  string      @ 请求时设置的应用名称
---@field AppSign  string      @ 请求时设置的应用签名(MD5值)
---@field ApiName  string      @ 请求时设置api名称
---@field ApiVersion  string   @ 请求时设置api版本
---@field Charset  string      @ 编码格式 GBK|UTF8
---@field FLG_WantTran string    @ 接口转换标志 FS接口固定填Y
---@field FLG_Encrypt string   @ 加密标志 0:使用后台加密方式 1:表示采用统一接入标准密码加密方式
local _M = {}

---
---@class header_builder: kdgp_header
local builder = {}
_M.builder = builder

function builder.SetValue(self, key, value)
    self.head_[key] = value
    return self
end

function builder.GetValue(self, key)
    return self.head_[key]
end

function builder.new()
    local head_ = {
        --- 自动填Context
        Context = util.makeContext(),
    }
    local self = {
        head_ = head_,
        SetValue = builder.SetValue,
        GetValue = builder.GetValue,
    }
    setmetatable(head_, {
        __tostring = function()
            return cjson.encode(head_)
        end
    })
    setmetatable(self, {
        __index = function(_, key)
            return head_[key]
        end,
        __newindex = function(_, key, value)
            head_[key] = value
        end,
        __tostring = function()
            return tostring(head_)
        end,
        __call = function()
            return head_
        end
    })
    return self
end

return _M
