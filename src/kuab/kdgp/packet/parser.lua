---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by luxizhu.
--- DateTime: 2021/5/31 13:41
---

local require = require
local cjson = require "cjson"
local const = require "kuab.kdgp.const"
local util = require "kuab.util.util"
local kdgp_packet = require "kuab.kdgp.packet"
local setmetatable = setmetatable
local table = table
local tostring = tostring
local string = string
local tonumber = tonumber
local std_string = util.std_string
local _M = {}

function _M:apply(packet)
    if not string.match(packet, "^KDGP") then
        return nil
    end
    -- "包头长度8字节"
    local head_length_buffer = std_string(packet, const.kProtocolLen, const.kHeadLenFieldLen)
    -- "包体长度8字节"
    local body_length_buffer = std_string(packet, const.kProtocolLen + const.kHeadLenFieldLen, const.kBodyLenFieldLen)

    local head_total_length = tonumber(head_length_buffer)
    local body_total_length = tonumber(body_length_buffer)
    if head_total_length < 0 or body_total_length < 0 then
        return nil
    end
    if #packet < const.kProtocolLen + const.kHeadLenFieldLen + const.kBodyLenFieldLen + head_total_length + body_total_length then
        return nil
    end
    local crc = std_string(packet, const.kCRCBeginPos, const.kCRCFieldLen)

    local head_format = std_string(packet, const.kHeadFormatBeginPos, const.kHeadFormatFieldLen)
    local body_format = std_string(packet, const.kCRCBeginPos + head_total_length, const.kBodyFormatFieldLen)

    local head_data_length = head_total_length - const.kCRCFieldLen - const.kHeadFormatFieldLen
    local head_data = std_string(packet, const.kHeadFormatBeginPos + const.kHeadFormatFieldLen, head_data_length)
    local head_json = cjson.decode(head_data)

    local body_data_length = body_total_length - const.kBodyFormatFieldLen
    local body_data = std_string(packet, const.kCRCBeginPos + head_total_length + const.kBodyFormatFieldLen, body_data_length)
    local body_json = cjson.decode(body_data)

    return kdgp_packet.new {
        head_length = head_data_length,
        body_length = body_data_length,
        crc = crc,
        head_data = head_data,
        body_data = body_data,
        head_format = head_format,
        body_format = body_format,
        Context = head_json.Context,
        head_json = head_json,
        body_json = body_json,
    }
end

setmetatable(_M, { __call = _M.apply })
return _M
